#!/usr/bin/perl

# Copyright (c) 2021 Spuds <AtomicSpudsGame@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Config::Tiny;
use Data::Dumper;
use Data::ICal;
use Date::Manip::DM6;
use Date::Manip::Date;
use Date::Manip::TZ;
use Getopt::Std;
use Text::Autoformat;

my $HOME = $ENV{'HOME'};

our $opt_a; # if defined, at output vs ub3r
our $opt_c; # if defined, override $conf file
our $opt_d; # if defined, day of week to match
our $opt_s; # if defined, section of conf file to use
our $opt_w; # webhook
our $opt_n; # do all but spawn the at jobs

$opt_c = "$HOME/.dwebics.conf";

getopts('ac:d:ns:w:');

if (!-f $opt_c) {
	die "Need a config file. ${opt_c} not found";
}

our $config = Config::Tiny->read( $opt_c );

my @warntimes = (2880,1440,120,60,45,30,10);

if (defined($opt_s)) {
	if (defined($config->{$opt_s})) {
		my $v = $config->{$opt_s}->{webhook};
		if (defined($v)) {
			$opt_w = $v;
		}

		$v = $config->{$opt_s}->{warnings};
		if (defined($v)) {
			@warntimes = ();
			foreach my $w (split(/,/,$v)) {
				push @warntimes, $w;
			}
		}
	}
}

if (!defined($opt_w) && defined($opt_a)) {
	die "Need '-w <webhook url>' to send reminders";
	exit(1);
}

our $wh = $opt_w;

my $body = eval { local $/ = undef; <> };
my $calendar = Data::ICal->new(data => $body);

# If parsing failed, try parsing as version 1.0
$calendar = Data::ICal->new(data => $body, vcal10 => 1) unless $calendar;

# If parsing failed, give up :-(
unless ( $calendar ) {
    print "Unable to parse vcalendar: ", $calendar->error_message, "\n";
    print $body;
    exit 1;
}

our $ev = { };

my $vevent = 0;
foreach my $entry ( @{$calendar->{entries}} ) {
    my $properties;

    foreach my $property ( keys %{$entry->properties} ) {
        next unless defined $entry->property($property);
        $properties->{$property} = join(', ', map { $_->decoded_value } @{$entry->property($property)});
        if ( $property eq 'description' ) {
            #$properties->{$property} = eval qq{"$properties->{$property}"};
	    #printf "Description: %s\n", $properties->{$property};

            $properties->{$property} = autoformat $properties->{$property}, {
                all => 1,
                left => 15,
            };
            $properties->{$property} =~ s/^\s*// if defined $properties->{$property};
        } elsif ( $property =~ m{ \A dt (?: start | end ) \z }xms ) {
            if ( $properties->{$property} =~ m{ (\d\d\d\d)(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d) }xms ) {
                $properties->{$property} = "$1-$2-$3 $4:$5:$6";
            }
	}
    }

    my $gtz;

    if ( $entry->ical_entry_type eq 'VEVENT' ) {
    	my $event = { };
	$event->{count} = $vevent++;
	my $prevseen = 0;
        foreach my $key ( qw(summary dtstart dtend) ) {
	    $prevseen = 0;
            next unless defined $properties->{$key};
	    my $info = $properties->{$key};
	    $info =~ s/mailto://gi;
	    $info =~ s/\s*$//;
	    next unless length($info) > 0;
	    $prevseen = 1;
	    my $timeentry = 0;
	    my $k = $key;
	    if ($key eq 'dtstart') {
		$k = "starts";
		$timeentry = 1;
	    } elsif ($key eq 'dtend') {
		$k = "ends";
		$timeentry = 1;
	    }
	    if ($timeentry > 0) {
		my ($loctz,$tz);
		# check if ';TZID=<timezone>' was specified as a parameter
		foreach my $param ( @{$entry->property($key)} ) {
			foreach my $parm (keys %{$param->parameters} ) {
				if ($parm eq "TZID") {
					$tz = ${$param->parameters}{$parm};
				}
			}
		}
		# Default to 'GMT' if not specified anywhere else
		if (!defined($tz)) {
			if (!defined($gtz)) {
				if (!defined($properties->{tzid})) {
					$tz = "GMT";
				} else {
					$tz = $properties->{tzid};
				}
			} else {
				$tz = $gtz;
			}
		}
		my $tzobj = new Date::Manip::TZ;
		$loctz = $tzobj->curr_zone();

		# need Date::Manip::Date back, so had to read Date_ConvTZ() code to do the below:

		my $d = Date::Manip::Date->new();
		my $dmt = $d->tz();
		my $err = $d->parse($info);
		if ($err) {
			printf STDERR "parse of '%s' resulted in error: '%s'\n", $info, $err;
			exit(1);
		}

		my $dval = [ $d->value() ];
		if (! $dval) {
			printf STDERR "value of '%s' resulted in undef\n", $info;
			exit(1);
		}

		my $tmp;
		$tmp = $dmt->zone($tz, $dval);
		if (! $tmp) {
			$tmp = $dmt->zone($tz);
			if (! $tmp) {
				printf STDERR "tz src issue\n";
				exit(1);
			}
		}
		my $from = $tmp;

		$tmp = $dmt->zone($loctz, $dval);
		if (! $tmp) {
			$tmp = $dmt->zone($loctz);
			if (! $tmp) {
				printf STDERR "tz dst issue\n";
				exit(1);
			}
		}
		my $to = $tmp;

		($err, $dval) = $dmt->convert($dval, $from, $to);
		if ($err) {
			printf STDERR "dmt->convert() err = '%s'\n", $err;
			exit(1);
		}
		#printf STDERR "dval is a %s, contents:\n", ref($dval);
		#print STDERR Dumper($dval);
		#print STDERR "\n";
		$d->set('date', $dval);
		#printf STDERR "d is a %s, contents:\n", ref($d);
		#print STDERR Dumper($d);
		#print STDERR "\n";

		$info = $d;

	    }
	    if (defined($info)) {
		#printf STDERR "event->{%s} = { %s }\n", $k, ref($info);
		$event->{$k} = $info;
	    }
        }
	add_event($event);
    } elsif ( $entry->ical_entry_type eq 'VTIMEZONE') {
	if (defined($properties->{tzid})) {
		$gtz = $properties->{tzid};
	}
    } else {
        print "WARNING: Unknown entry type: ", $entry->ical_entry_type, "\n";
    }
}

my $now = Date::Manip::Date->new();
$now->parse("now");
my $nows = $now->secs_since_1970_GMT();

our $warntime = Date::Manip::Date->new();


foreach my $dow (("Sunday","Monday","Tuesday","Wednesday","Thursday",
	"Friday","Saturday")) {

    my $e = $ev->{$dow}->{events};
    if (!defined($e)) {
	next;
    }

    print "Processing ($dow)\n";
    my @events = @{$ev->{$dow}->{events}};

    my $summary = "";

    foreach my $event (sort { $a->{starts}->cmp($b->{starts}) } @events) {
	my $starts = $event->{starts}->secs_since_1970_GMT();

	my ($pdt,$mdt,$cdt,$edt);
	my ($h,$ampm,$dow) = $event->{starts}->printf("%k","%p","%A");
	if (defined($opt_d) && $dow ne $opt_d) {
		next;
	}
	$h =~ s/^\s+//;
	$ampm = lc($ampm);
	my $pacific = $h - 2;
	if ($pacific < 12) {
		$pdt = "${pacific}am";
	} else {
		if ($pacific > 12) {
			$pacific = $pacific - 12;
		}
		$pdt = "${pacific}pm";
	}
	my $mountain = $h - 1;
	if ($mountain < 12) {
		$mdt = "${mountain}am";
	} else {
		if ($mountain > 12) {
			$mountain = $mountain - 12;
		}
		$mdt = "${mountain}pm";
	}
	my $central = $h;
	if ($central > 12) {
		$central = $central - 12;
	}
	$cdt = ${central}.$ampm;
	my $eastern = $h + 1;
	if ($eastern > 12) {
		$eastern = $eastern - 12;
	}
	$edt = ${eastern}.$ampm;

	my $b4reset = 10 - $central;
	# always afternoon
	my $hour = "${b4reset}h before reset
$pdt US/Pacific
$mdt US/Mountain
$cdt US/Central
$edt US/Eastern";
	$summary .= "$pdt PDT/$mdt MDT/$cdt CDT/$edt EDT - ";
	$summary .= $event->{summary};
	$summary .= "\n";
	
	my $warnbase = $starts - $nows;

	foreach my $w (@warntimes) {
		my $m = $w;
		my $warns = $warnbase;
		if (!defined($event->{starts})) {
			printf STDERR "Event '%s' starts is undef\n", $event->{summary};
			exit(1);
		}
		$warns -= ($m * 60);
		if (!defined($warns)) {
			print STDERR "warns undef!\n";
			exit(1);
		}

		# adjust for future event if its in thee past
	
		while ($warns < 0) {
			$warns += 7*24*3600;
		}
		my $timestr = "in ";
		my $h = 0;
		while ($m >= 60) {
			$h++;
			$m = $m - 60;
		}
		if ($h > 0) {
			$timestr .= "$h hours ";
		}
		if ($m > 0) {
			$timestr .= "$m minutes";
		}
		my $str;
		if (defined($opt_a)) {
			my $sum = $warns + $nows;
			fmt_warning($sum, $event->{summary},
				$timestr, $warns, $dow, $hour);
		} else {
			$str = sprintf "hey b remind \@everyone in %d seconds to takeover in %s on %s at %s (%s)\n",
			$warns, $timestr, $dow, $hour, $event->{summary};
			$str =~ s/\s+/ /g;
			print $str."\n";
		}
	}
	my $warns = $warnbase;
	while ($warns < 0) {
		$warns += 7*24*3600;
	}
	if (defined($opt_a)) {
		my $sum = $warns + $nows;
		fmt_warning($sum, $event->{summary},
			"NOW", $warns, $dow, $hour);
	} else {
		printf "hey b remind \@everyone in %d seconds to takeover NOW on %s at %s (%s)\n",
			$warns, $dow, $hour, $event->{summary};
	}
    }
    print "${dow} Summary: '${summary}'\n";
}

0;

sub fmt_warning {
	my ($secs, $summary, $timestr, $warns, $dow, $hour) = @_;

	$warntime->secs_since_1970_GMT($secs);
	my $atime = $warntime->printf("%Y%m%d%H%M.%S");
	printf STDERR "at -t %s # %s in %ds (%s warning)\n",
		$atime, $summary, $warns, $timestr;
	my $cmd = sprintf "dwebhook %s \"TC Reminder: %s\" ".
		"\"%s on %s %s
\@everyone\"",
		$wh, $summary, $timestr, $dow, $hour;
	printf STDERR "  %s\n", $cmd;
	if (!defined($opt_n)) {
		open(C,"|at -t $atime");
		printf C "%s\n", $cmd;
		close(C);
	}
}


sub add_event {
	my ($event) = @_;

	my ($dow) = $event->{starts}->printf("%A");

	if ($event->{summary} =~ /Summary/) {
		return;
	}

	#print "Adding ($dow) ".$event->{summary}."\n";

	if (defined($ev->{$dow}->{events})) {
		push @{$ev->{$dow}->{events}}, $event;
	} else {
		@{$ev->{$dow}->{events}} = ($event);
	}
}
