#!/usr/bin/perl

# vcalendar-filter is a simple filter to give plain text representations of vcards
# Copyright (C) 2008  Martyn Smith
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script takes a simple VCALENDAR file as input on STDIN and produces a
# human readable text/plain representation of it on STDOUT
#
# It has been designed for use with mutt's auto_view config option, see the
# README file for more details

use strict;
use warnings;

use Data::Dumper;
use Data::ICal;
use Text::Autoformat;
use Date::Manip::DM6;
use Date::Manip::TZ;
use Date::Manip::Date;

my $body = eval { local $/ = undef; <> };
my $calendar = Data::ICal->new(data => $body);

# If parsing failed, try parsing as version 1.0
$calendar = Data::ICal->new(data => $body, vcal10 => 1) unless $calendar;

# If parsing failed, give up :-(
unless ( $calendar ) {
    print "Unable to parse vcalendar: ", $calendar->error_message, "\n";
    print $body;
    exit 1;
}

my @events;

my $vevent = 0;
foreach my $entry ( @{$calendar->{entries}} ) {
    my $properties;

    foreach my $property ( keys %{$entry->properties} ) {
        next unless defined $entry->property($property);
        $properties->{$property} = join(', ', map { $_->decoded_value } @{$entry->property($property)});
        if ( $property eq 'description' ) {
            #$properties->{$property} = eval qq{"$properties->{$property}"};
	    #printf "Description: %s\n", $properties->{$property};

            $properties->{$property} = autoformat $properties->{$property}, {
                all => 1,
                left => 15,
            };
            $properties->{$property} =~ s/^\s*// if defined $properties->{$property};
        } elsif ( $property =~ m{ \A dt (?: start | end ) \z }xms ) {
            if ( $properties->{$property} =~ m{ (\d\d\d\d)(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d) }xms ) {
                $properties->{$property} = "$1-$2-$3 $4:$5:$6";
            }
	}
    }

    my $gtz;

    if ( $entry->ical_entry_type eq 'VEVENT' ) {
    	my $event = { };
	$event->{count} = $vevent++;
	my $prevseen = 0;
        foreach my $key ( qw(summary dtstart dtend) ) {
	    $prevseen = 0;
            next unless defined $properties->{$key};
	    my $info = $properties->{$key};
	    $info =~ s/mailto://gi;
	    $info =~ s/\s*$//;
	    next unless length($info) > 0;
	    $prevseen = 1;
	    my $timeentry = 0;
	    my $k = $key;
	    if ($key eq 'dtstart') {
		$k = "starts";
		$timeentry = 1;
	    } elsif ($key eq 'dtend') {
		$k = "ends";
		$timeentry = 1;
	    }
	    if ($timeentry > 0) {
		my ($loctz,$tz);
		# check if ';TZID=<timezone>' was specified as a parameter
		foreach my $param ( @{$entry->property($key)} ) {
			foreach my $parm (keys %{$param->parameters} ) {
				if ($parm eq "TZID") {
					$tz = ${$param->parameters}{$parm};
				}
			}
		}
		# Default to 'GMT' if not specified anywhere else
		if (!defined($tz)) {
			if (!defined($gtz)) {
				if (!defined($properties->{tzid})) {
					$tz = "GMT";
				} else {
					$tz = $properties->{tzid};
				}
			} else {
				$tz = $gtz;
			}
		}
		my $tzobj = new Date::Manip::TZ;
		$loctz = $tzobj->curr_zone();

		# need Date::Manip::Date back, so had to read Date_ConvTZ() code to do the below:

		my $d = Date::Manip::Date->new();
		my $dmt = $d->tz();
		my $err = $d->parse($info);
		if ($err) {
			printf STDERR "parse of '%s' resulted in error: '%s'\n", $info, $err;
			exit(1);
		}

		my $dval = [ $d->value() ];
		if (! $dval) {
			printf STDERR "value of '%s' resulted in undef\n", $info;
			exit(1);
		}

		my $tmp;
		$tmp = $dmt->zone($tz, $dval);
		if (! $tmp) {
			$tmp = $dmt->zone($tz);
			if (! $tmp) {
				printf STDERR "tz src issue\n";
				exit(1);
			}
		}
		my $from = $tmp;

		$tmp = $dmt->zone($loctz, $dval);
		if (! $tmp) {
			$tmp = $dmt->zone($loctz);
			if (! $tmp) {
				printf STDERR "tz dst issue\n";
				exit(1);
			}
		}
		my $to = $tmp;

		($err, $dval) = $dmt->convert($dval, $from, $to);
		if ($err) {
			printf STDERR "dmt->convert() err = '%s'\n", $err;
			exit(1);
		}
		#printf STDERR "dval is a %s, contents:\n", ref($dval);
		#print STDERR Dumper($dval);
		#print STDERR "\n";
		$d->set('date', $dval);
		#printf STDERR "d is a %s, contents:\n", ref($d);
		#print STDERR Dumper($d);
		#print STDERR "\n";

		$info = $d;

	    }
	    if (defined($info)) {
		#printf STDERR "event->{%s} = { %s }\n", $k, ref($info);
		$event->{$k} = $info;
	    }
        }
	push @events, $event;
    } elsif ( $entry->ical_entry_type eq 'VTIMEZONE') {
	if (defined($properties->{tzid})) {
		$gtz = $properties->{tzid};
	}
    } else {
        print "WARNING: Unknown entry type: ", $entry->ical_entry_type, "\n";
    }
}

my $now = Date::Manip::Date->new();
$now->parse("now");
my $nows = $now->secs_since_1970_GMT();
foreach my $event (sort { $a->{starts}->cmp($b->{starts}) } @events) {
	my $starts = $event->{starts}->secs_since_1970_GMT();
	foreach my $w ((1440,720,360,45,15,5)) {
		my $m = $w;
		if (!defined($event->{starts})) {
			printf STDERR "Event '%s' starts is undef\n", $event->{summary};
			exit(1);
		}
		my $warns = $starts - $nows;
		$warns -= ($m * 60);
		if (!defined($warns)) {
			print STDERR "warns undef!\n";
			exit(1);
		}
		# adjust for future event if its in thee past
		while ($warns < 0) {
			$warns += 7*24*3600;
		}
		my $timestr = "";
		my $h = 0;
		while ($m >= 60) {
			$h++;
			$m = $m - 60;
		}
		if ($h > 0) {
			$timestr .= "$h hours ";
		}
		if ($m > 0) {
			$timestr .= "$m minutes";
		}
			
		printf "hey b remind \@everyone in %d seconds to note: %s Takeover Event in %s\n",
			$warns, $event->{summary}, $timestr;
	}
	my $warns = $starts - $nows;
	while ($warns < 0) {
		$warns += 7*24*3600;
	}
	printf "hey b remind \@everyone in %d seconds to note: %s Takeover Event NOW\n",
		$warns, $event->{summary};
}
